////////////////////////////////////////////////////////////////////////////////
// Install precompile EdgeTPU package from APT.
////////////////////////////////////////////////////////////////////////////////
# Install EdgeTPU runtime for linux.
echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-get update

# Install standard EdgeTPU runtime.
sudo apt-get install libedgetpu1-std
# Install max speed EdgeTPU runtime. (CoralUSB accelerator will get really hot!)
sudo apt-get install libedgetpu1-max

////////////////////////////////////////////////////////////////////////////////////////
//  OLD MAKE builds for TensorflowLite.
////////////////////////////////////////////////////////////////////////////////////////
# Install TensorflowLite 2 for 32-bit raspberry pi OS.
# the tools needed
$ sudo apt-get install cmake curl
# download the old version of TensorFlow to match libedgetpu (2.5.0)
$ wget -O tensorflow.zip https://github.com/tensorflow/tensorflow/archive/v2.5.0.zip
# unpack and give the folder a convenient name
$ unzip tensorflow.zip
$ mv tensorflow-2.6.0 tensorflow
$ cd tensorflow
# get the dependencies
$ ./tensorflow/lite/tools/make/download_dependencies.sh
# run the C++ installation (± 25 min)
$ ./tensorflow/lite/tools/make/build_rpi_lib.sh
# install the flatbuffers
$ cd ~/tensorflow/tensorflow/lite/tools/make/downloads/flatbuffers
$ mkdir build
$ cd build
$ cmake ..
$ make -j4
$ sudo make install
$ sudo ldconfig
# clean up
$ cd ~
$ rm tensorflow.zip



# Install TensorflowLite 2 for 64-bit raspberry pi OS.
# the tools needed
$ sudo apt-get install cmake curl
# download the latest TensorFlow version (2.6.0)
$ wget -O tensorflow.zip https://github.com/tensorflow/tensorflow/archive/v2.6.0.zip
# unpack and give the folder a convenient name
$ unzip tensorflow.zip
$ mv tensorflow-2.6.0 tensorflow
$ cd tensorflow
# get the dependencies
$ ./tensorflow/lite/tools/make/download_dependencies.sh
# run the C++ installation (± 25 min)
$ ./tensorflow/lite/tools/make/build_aarch64_lib.sh
# install the flatbuffers
$ cd ~/tensorflow/tensorflow/lite/tools/make/downloads/flatbuffers
$ mkdir build
$ cd build
$ cmake ..
$ make -j4
$ sudo make install
$ sudo ldconfig
# clean up
$ cd ~
$ rm tensorflow.zip








////////////////////////////////////////////////////////////////////////////////////////
//  NEW CMAKE builds for TensorflowLite. !!!MUST MAKE SURE TENSORFLOW VERSION MATCHES LIBEDGETPU RUNTIME'S VERSION!!!
////////////////////////////////////////////////////////////////////////////////////////
# Install TensorflowLite 2 for 32-bit raspberry pi OS.
# the tools needed
$ sudo apt-get install cmake curl
# download the latest TensorFlow version (2.12.0)
$ wget -O tensorflow.zip https://github.com/tensorflow/tensorflow/archive/v2.12.0.zip
# unpack and give the folder a convenient name
$ unzip tensorflow.zip
$ mv tensorflow-2.12.0 tensorflow
# Build TensorflowLite
$ cd tensorflow/tensorflow
//// Build with manually downloaded gcc and g++.
# Download toolchains.
$ curl -LO https://storage.googleapis.com/mirror.tensorflow.org/developer.arm.com/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz
$ mkdir -p ${HOME}/toolchains
$ tar xvf gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz -C ${HOME}/toolchains
$ ARMCC_FLAGS="-march=armv7-a -mfpu=neon-vfpv4 -funsafe-math-optimizations -mfp16-format=ieee"
$ ARMCC_PREFIX=${HOME}/toolchains/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
$ cmake -DCMAKE_C_COMPILER=${ARMCC_PREFIX}gcc \
  -DCMAKE_CXX_COMPILER=${ARMCC_PREFIX}g++ \
  -DCMAKE_C_FLAGS="${ARMCC_FLAGS}" \
  -DCMAKE_CXX_FLAGS="${ARMCC_FLAGS}" \
  -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
  -DCMAKE_SYSTEM_NAME=Linux \
  -DCMAKE_SYSTEM_PROCESSOR=armv7 \
  -DTFLITE_ENABLE_XNNPACK=ON \
  ../tensorflow/lite/
//// Build with apt installed gcc and g++
$ sudo apt install g++ gcc-arm*
$ ARMCC_FLAGS="-march=armv7-a -mfpu=neon-vfpv4 -funsafe-math-optimizations -mfp16-format=ieee"
$ cmake -DCMAKE_C_COMPILER=gcc \
  -DCMAKE_CXX_COMPILER=g++ \
  -DCMAKE_C_FLAGS="${ARMCC_FLAGS}" \
  -DCMAKE_CXX_FLAGS="${ARMCC_FLAGS}" \
  -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
  -DCMAKE_SYSTEM_NAME=Linux \
  -DCMAKE_SYSTEM_PROCESSOR=armv7 \
  -DTFLITE_ENABLE_XNNPACK=ON \
  ../tensorflow/lite/
# Finally, compile tensorflowlite.
sudo make -j4
sudo make install
sudo ldconfig

